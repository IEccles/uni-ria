<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{systemName}} | Login</title>
    <link rel="stylesheet" href="/assets/css/style.min.css">
</head>

<body class="bg-gray-50">

    {{!-- 
        Because we have a strict CORS policy we can create a cool effect where
        if the stylesheet hasnt been loaded yet, we can show a message to the user
        explaining why they are seeing a plain html page.

        *The stylesheet wont be loaded if the user is accessing the system from an
        unauthorised domain or an unsecure connection due to the cors policy.

        This is a good way to handle the situation where the user is accessing the
        system from an unauthorised domain or an unsecure connection.
     --}}

    <style>
        .cors-check {visibility: hidden;animation: appear 0.01s forwards;animation-delay: 1.5s;}
        @keyframes appear {to {visibility: visible} }
    </style>
    <div class="cors-check hidden">
        <p>You are seeing this message for 1 of 4 reasons:</p>
        <ul style="padding-left: 20px;">
            <li>The stylsheet hasnt been loaded yet, try refreshing the page.</li>
            <br>
            <li>You are accessing {{systemName}} from an unauthorised domain, make sure your connecting from an official domain (https://{{systemDomain}}).</li>
            <br>
            <li>You are accessing {{systemName}} from an unsecure connection, make sure you have a https connection.</li>
            <br>
            <li>This instance of rooted has not been setup correctly.</li>
        </ul>
        <p>*Note that this incident has been logged! ({{uuidv4}})</p>
    </div>

    <section style="display: none;" class="!flex flex-col items-center justify-center px-6 py-8 mx-auto md:h-screen lg:py-0">
        
        <div class="w-full mt-[130px] bg-white rounded-lg shadow flex md:mt-0 sm:max-w-md xl:p-0 relative items-center justify-center">
            <div class="p-6 space-y-4 md:space-y-6 sm:p-8 w-full">
                <form id="login" class="space-y-4 md:space-y-6">
                    <div>
                        <label for="email" class="block mb-2 text-sm font-medium text-gray-900 ">Email
                            Address</label>
                        <input type="email" id="email"
                            class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                            placeholder="name@{{systemDomain}}" required="">
                    </div>
                    <div>
                        <label for="password" class="block mb-2 text-sm font-medium text-gray-900 ">Password</label>
                        <input type="password" id="password" placeholder="••••••••"
                            class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                            required="">
                    </div>
                    <div id="twofa" class="!mt-0">
                    </div>
                    <div class="flex items-center justify-between">
                        <div class="flex items-start">
                            <div class="flex items-center h-5">
                                <input id="remember" aria-describedby="remember" type="checkbox"
                                    class="w-4 h-4 border border-gray-300 rounded bg-gray-50 focus:ring-3 focus:ring-rooted ">
                            </div>
                            <div class="ml-3 text-sm">
                                <label for="remember" class="text-gray-500 ">Remember me</label>
                            </div>
                        </div>
                        <button id="signup-btn" type="button" class="hidden sm:block text-sm font-medium text-rooted hover:underline ">Don't have an account? Signup</button>
                    </div>

                    <button type="submit"
                        class="w-full text-rooted-foreground bg-rooted hover:bg-rooted/[.9] focus:ring-4 focus:outline-none focus:ring-rooted font-medium rounded-lg text-sm px-5 py-2.5 text-center ">Sign
                        in</button>

                    <ul class="text-red-400 list-disc ml-4 hidden" id="error">
                        <li>Invalid email or password</li>
                    </ul>
                </form>

                <form id="signup" class="space-y-4 md:space-y-6 hidden">
                    <button id="return" class="sm:block text-sm font-medium text-rooted hover:underline">Back</button>
                    <h2>Signup</h2>
                    <p>Password must be at least 8 characters, contain 1 upper case letter and contain 2 at least 2 digits</p>
                    <div class="flex flex-col">
                        <div class="flex justify-between">
                            <div class="flex flex-col">
                                <label for="first-name" class="block mb-2 text-sm font-medium text-gray-900">First Name</label>
                                <input type="text" id="first-name"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                                    placeholder="John">        
                            </div>
                            <div class="flex flex-col">
                                <label for="last-name" class="block mb-2 text-sm font-medium text-gray-900">Last Name</label>
                                <input type="text" id="last-name"
                                    class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                                    placeholder="Doe">
                            </div>
                        </div>
                        <label for="signup-email" class="block mb-2 text-sm font-medium text-gray-900 ">Email
                            Address</label>
                        <input type="email" id="signup-email"
                            class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                            placeholder="name@{{systemDomain}}">

                        <label for="signup-password" class="block mb-2 text-sm font-medium text-gray-900">Password</label>
                        <input type="password" id="signup-password"
                            class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 "
                            placeholder="*****">
                    </div>
                    <button type="submit"
                        class="w-full text-rooted-foreground bg-rooted hover:bg-rooted/[.9] focus:ring-4 focus:outline-none focus:ring-rooted font-medium rounded-lg text-sm px-5 py-2.5 text-center">Continue</button>
                </form>
            </div>
        </div>
    </section>
</body>

<script src="https://cdn.jsdelivr.net/npm/toastr2@3.0.0-alpha.18/dist/Toastr.umd.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/toastr2@3.0.0-alpha.18/dist/toastr.min.css" rel="stylesheet">

<script>const notify = new toastr({"closeButton": true,"debug": {{#if (inProd) }} false{{else}} true{{/if }},"newestOnTop": false,"progressBar": true,"positionClass": "toast-top-right","preventDuplicates": true,"onclick": null,"showDuration": "300","hideDuration": "1000","timeOut": "5000","extendedTimeOut": "1000","showEasing": "swing","hideEasing": "linear","showMethod": "fadeIn","hideMethod": "fadeOut"});</script>

<script>
    function base64URLdecode(str) {
        const base64Encoded = str.replace(/-/g, '+').replace(/_/g, '/');
        const padding = str.length % 4 === 0 ? '' : '='.repeat(4 - (str.length % 4));
        const base64WithPadding = base64Encoded + padding;
        return atob(base64WithPadding)
            .split('')
            .map(char => String.fromCharCode(char.charCodeAt(0))).join('');
    }

    function getCookie(cname) {
        let name = cname + "=";
        let decodedCookie = decodeURIComponent(document.cookie);
        let ca = decodedCookie.split(';');
        for(let i = 0; i <ca.length; i++) {
            let c = ca[i];
            while (c.charAt(0) == ' ') {
            c = c.substring(1);
            }
            if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
            }
        }
        return "";
    }

    function isPath(str) {
        return !new RegExp('^(?:[a-z+]+:)?//', 'i').test(str);
    }

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('login');
        const errorEl = form.querySelector('#error');

        const email = document.querySelector('#email');
        const password = document.querySelector('#password');
        const remember = document.querySelector('#remember');
        const twofa = document.querySelector('#twofa');

        form.addEventListener('submit', (event) => {
            event.preventDefault();
            errorEl.classList.add('hidden');

            const payload = {
                email: email.value,
                password: password.value,
                remember: remember.checked
            }

            if (twofa.querySelector('input')) {
                payload.twofa = twofa.querySelector('input').value.replace(/\s/g, '');
            }

            fetch('/login', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.code === 200) {

                        const urlParams = new URLSearchParams(window.location.search);
                        const redirect = urlParams.get('r');

                        // Make sure to only redirect to the system domain otherwise
                        // an attacker could redirect to a malicious site after login

                        if (!redirect || redirect !== getCookie('r')) {
                            window.location.href = '/dashboard';
                            return;
                        }

                        const decoded = base64URLdecode(redirect);

                        if (!isPath(decoded)) {
                            window.location.href = '/dashboard';
                            return;
                        }

                        const url = new URL(decoded, {{#if (inProd)}}'https://{{systemDomain}}'{{else}}window.location.origin{{/if}}); 

                        if (window.location.hash) {
                            url.hash = window.location.hash;
                        }

                        document.cookie = "r=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/; SameSite=Strict;";
                        window.location.href = url;
                    } else {

                        if (data.error === '2FA is enabled') {

                            email.parentElement.classList.add('hidden');
                            password.parentElement.classList.add('hidden');
                            remember.parentElement.parentElement.parentElement.classList.add('hidden');

                            twofa.innerHTML =
                                '<label class="block mb-2 text-sm font-medium text-gray-900 ">Two Factor Authentication</label>' +
                                '<input type="text" placeholder="000 000" pattern="^.{7}$" class="bg-gray-50 border border-gray-300 text-gray-900 sm:text-sm rounded-lg focus:ring-rooted focus:border-rooted block w-full p-2.5 " required="">';

                            twofa.querySelector('input').addEventListener('input', (event) => {
                                let input = event.target.value.replace(/\s/g, ''); // remove all spaces
                                if (isNaN(input)) {
                                    event.target.value = input.slice(0, input.length - 1);
                                    return;
                                }
                                if (input.length > 3) {
                                    input = input.slice(0, 3) + ' ' + input.slice(3, 6); // add space after 3rd character
                                }
                                event.target.value = input.slice(0, 7); // limit to 6 characters + 1 space
                            });

                            return;
                        }

                        errorEl.querySelector('li').textContent = data.error;
                        errorEl.classList.remove('hidden');
                    }
                })
                .catch(error => {
                    console.error(error);
                });
        });

        const signupBtn = document.getElementById('signup-btn')
        const signup = document.getElementById('signup')
        const back = document.getElementById('return')

        signupBtn.addEventListener('click', (e) => {
            e.preventDefault();
            form.classList.add('hidden')
            signup.classList.remove('hidden')
        })

        back.addEventListener('click', (e) => {
            e.preventDefault();
            form.classList.remove('hidden')
            signup.classList.add('hidden')
        })

        signup.addEventListener('submit', (e) => {
            e.preventDefault();

            fetch('/signup', {
                method: 'POST',
                body: JSON.stringify({
                    firstName: signup.querySelector('#first-name').value,
                    lastName: signup.querySelector('#last-name').value,
                    email: signup.querySelector('#signup-email').value,
                    password: signup.querySelector('#signup-password').value
                }),
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(res => res.json()).then((data) => {
                if (data.code === 200) {
                    notify.success('Account Successfully created!', 'Please login')
                    signup.reset();
                    signup.classList.add('hidden');
                    form.classList.remove('hidden');
                }
            }).catch((err) => {
                console.log(err)
            })
        })
    });
</script>

</html>