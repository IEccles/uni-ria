<script src=" https://cdn.jsdelivr.net/npm/sweetalert@2.1.2/dist/sweetalert.min.js "></script>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/tinymce@6.4.1/skins/ui/oxide/content.min.css">
<script src="https://cdn.jsdelivr.net/npm/tinymce@6.4.1/tinymce.min.js"></script>
<script src="/assets/js/base64.js"></script>

<div class="flex flex-col gap-3">
    <div class="flex flex-wrap place-item-center gap-4">

        <select id="pagination-per-page" class="px-2 pl-3 py-1 text-black/[.6] text-md bg-white border rounded-md">
            <option value="15">15 / Page</option>
            <option value="25" selected>25 / Page</option>
            <option value="50">50 / Page</option>
            <option value="100">100 / Page</option>
        </select>

        <div class="relative grow order-[-1] w-full md:w-auto md:order-none">
            <label for="search-orders" class="sr-only"> Search </label>

            <span class="absolute inset-y-0 start-0 grid w-10 place-content-center pointer-events-none">
                <button type="button" class="text-gray-600 hover:text-rooted">
                    <span class="sr-only">Search</span>

                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5"
                        stroke="currentColor" class="h-4 w-4">
                        <path stroke-linecap="round" stroke-linejoin="round"
                            d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" />
                    </svg>
                </button>
            </span>

            <input type="text" id="search-orders" placeholder="Search by ID, Name, SKU, Tags."
                class="w-full rounded-md border py-2.5 ps-10 pl-2 shadow-sm sm:text-sm" />
        </div>
        
    </div>

    <div class="flex flex-col gap-4">
        <div class="w-full overflow-x-auto max-w-[calc(100vw-16px-16px)] md:max-w-[calc(100vw-88px-24px-24px)] lg:max-w-[calc(100vw-288px-24px-24px)]">
            <table class="w-full border">
                <thead>
                    <tr class="text-rooted-foreground text-sm text-left uppercase">
                        <th class="border-b bg-rooted rounded-tl-md p-2 pl-4">
                            <span class="w-max block pr-2">ID</span>
                        </th>
                        <th class="border-b bg-rooted cursor-pointer" id="order-by-name" data-orderby="none">
                            <span class="flex gap-1.5 place-items-center w-max pr-2">
                                Customer Name
                                <svg id="none" class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="M8.574 11.024h6.852a2.075 2.075 0 0 0 1.847-1.086 1.9 1.9 0 0 0-.11-1.986L13.736 2.9a2.122 2.122 0 0 0-3.472 0L6.837 7.952a1.9 1.9 0 0 0-.11 1.986 2.074 2.074 0 0 0 1.847 1.086Zm6.852 1.952H8.574a2.072 2.072 0 0 0-1.847 1.087 1.9 1.9 0 0 0 .11 1.985l3.426 5.05a2.123 2.123 0 0 0 3.472 0l3.427-5.05a1.9 1.9 0 0 0 .11-1.985 2.074 2.074 0 0 0-1.846-1.087Z" />
                                </svg>
                                <svg id="desc" class="hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 16c-0.8-0.2-1.4-0.7-1.6-1.5-0.1-0.1-0.1-0.3-0.1-0.5 0-0.3 0.1-0.5 0.2-0.8 0.1-0.1 0.9-1.3 1.9-2.8 1.9-2.8 1.9-2.8 2.3-3 0.5-0.4 1.3-0.5 1.9-0.2 0.3 0.1 0.4 0.2 0.7 0.4 0.2 0.2 0.3 0.5 1.9 2.8 1 1.5 1.9 2.7 1.9 2.8 0.1 0.3 0.2 0.5 0.2 0.8 0 0.4-0.1 0.6-0.2 0.9q-0.4 0.8-1.4 1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                                <svg id="asc" class=" hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 8c-0.8 0.2-1.4 0.7-1.6 1.5-0.1 0.1-0.1 0.3-0.1 0.5 0 0.3 0.1 0.5 0.2 0.8 0.1 0.1 0.9 1.3 1.9 2.8 1.9 2.8 1.9 2.8 2.3 3 0.5 0.4 1.3 0.5 1.9 0.2 0.3-0.1 0.4-0.2 0.7-0.4 0.2-0.2 0.3-0.5 1.9-2.8 1-1.5 1.9-2.7 1.9-2.8 0.1-0.3 0.2-0.5 0.2-0.8 0-0.4-0.1-0.6-0.2-0.9q-0.4-0.8-1.4-1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                            </span>
                        </th>
                        <th class="border-b bg-rooted cursor-pointer" id="order-by-value" data-orderby="none">
                            <span class="flex gap-1.5 place-items-center w-max pr-2">
                                Customer Email
                                <svg id="none" class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="M8.574 11.024h6.852a2.075 2.075 0 0 0 1.847-1.086 1.9 1.9 0 0 0-.11-1.986L13.736 2.9a2.122 2.122 0 0 0-3.472 0L6.837 7.952a1.9 1.9 0 0 0-.11 1.986 2.074 2.074 0 0 0 1.847 1.086Zm6.852 1.952H8.574a2.072 2.072 0 0 0-1.847 1.087 1.9 1.9 0 0 0 .11 1.985l3.426 5.05a2.123 2.123 0 0 0 3.472 0l3.427-5.05a1.9 1.9 0 0 0 .11-1.985 2.074 2.074 0 0 0-1.846-1.087Z" />
                                </svg>
                                <svg id="desc" class="hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 16c-0.8-0.2-1.4-0.7-1.6-1.5-0.1-0.1-0.1-0.3-0.1-0.5 0-0.3 0.1-0.5 0.2-0.8 0.1-0.1 0.9-1.3 1.9-2.8 1.9-2.8 1.9-2.8 2.3-3 0.5-0.4 1.3-0.5 1.9-0.2 0.3 0.1 0.4 0.2 0.7 0.4 0.2 0.2 0.3 0.5 1.9 2.8 1 1.5 1.9 2.7 1.9 2.8 0.1 0.3 0.2 0.5 0.2 0.8 0 0.4-0.1 0.6-0.2 0.9q-0.4 0.8-1.4 1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                                <svg id="asc" class=" hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 8c-0.8 0.2-1.4 0.7-1.6 1.5-0.1 0.1-0.1 0.3-0.1 0.5 0 0.3 0.1 0.5 0.2 0.8 0.1 0.1 0.9 1.3 1.9 2.8 1.9 2.8 1.9 2.8 2.3 3 0.5 0.4 1.3 0.5 1.9 0.2 0.3-0.1 0.4-0.2 0.7-0.4 0.2-0.2 0.3-0.5 1.9-2.8 1-1.5 1.9-2.7 1.9-2.8 0.1-0.3 0.2-0.5 0.2-0.8 0-0.4-0.1-0.6-0.2-0.9q-0.4-0.8-1.4-1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                            </span>
                        </th>
                        <th class="border-b bg-rooted cursor-pointer" id="order-by-stock" data-orderby="none">
                            <span class="flex gap-1.5 place-items-center w-max pr-2">
                                Total
                                <svg id="none" class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="M8.574 11.024h6.852a2.075 2.075 0 0 0 1.847-1.086 1.9 1.9 0 0 0-.11-1.986L13.736 2.9a2.122 2.122 0 0 0-3.472 0L6.837 7.952a1.9 1.9 0 0 0-.11 1.986 2.074 2.074 0 0 0 1.847 1.086Zm6.852 1.952H8.574a2.072 2.072 0 0 0-1.847 1.087 1.9 1.9 0 0 0 .11 1.985l3.426 5.05a2.123 2.123 0 0 0 3.472 0l3.427-5.05a1.9 1.9 0 0 0 .11-1.985 2.074 2.074 0 0 0-1.846-1.087Z" />
                                </svg>
                                <svg id="desc" class="hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 16c-0.8-0.2-1.4-0.7-1.6-1.5-0.1-0.1-0.1-0.3-0.1-0.5 0-0.3 0.1-0.5 0.2-0.8 0.1-0.1 0.9-1.3 1.9-2.8 1.9-2.8 1.9-2.8 2.3-3 0.5-0.4 1.3-0.5 1.9-0.2 0.3 0.1 0.4 0.2 0.7 0.4 0.2 0.2 0.3 0.5 1.9 2.8 1 1.5 1.9 2.7 1.9 2.8 0.1 0.3 0.2 0.5 0.2 0.8 0 0.4-0.1 0.6-0.2 0.9q-0.4 0.8-1.4 1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                                <svg id="asc" class=" hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 8c-0.8 0.2-1.4 0.7-1.6 1.5-0.1 0.1-0.1 0.3-0.1 0.5 0 0.3 0.1 0.5 0.2 0.8 0.1 0.1 0.9 1.3 1.9 2.8 1.9 2.8 1.9 2.8 2.3 3 0.5 0.4 1.3 0.5 1.9 0.2 0.3-0.1 0.4-0.2 0.7-0.4 0.2-0.2 0.3-0.5 1.9-2.8 1-1.5 1.9-2.7 1.9-2.8 0.1-0.3 0.2-0.5 0.2-0.8 0-0.4-0.1-0.6-0.2-0.9q-0.4-0.8-1.4-1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                            </span>
                        </th>
                        <th class="border-b bg-rooted cursor-pointer" id="order-by-stock" data-orderby="none">
                            <span class="flex gap-1.5 place-items-center w-max pr-2">
                                Delivery Date
                                <svg id="none" class="w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="M8.574 11.024h6.852a2.075 2.075 0 0 0 1.847-1.086 1.9 1.9 0 0 0-.11-1.986L13.736 2.9a2.122 2.122 0 0 0-3.472 0L6.837 7.952a1.9 1.9 0 0 0-.11 1.986 2.074 2.074 0 0 0 1.847 1.086Zm6.852 1.952H8.574a2.072 2.072 0 0 0-1.847 1.087 1.9 1.9 0 0 0 .11 1.985l3.426 5.05a2.123 2.123 0 0 0 3.472 0l3.427-5.05a1.9 1.9 0 0 0 .11-1.985 2.074 2.074 0 0 0-1.846-1.087Z" />
                                </svg>
                                <svg id="desc" class="hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 16c-0.8-0.2-1.4-0.7-1.6-1.5-0.1-0.1-0.1-0.3-0.1-0.5 0-0.3 0.1-0.5 0.2-0.8 0.1-0.1 0.9-1.3 1.9-2.8 1.9-2.8 1.9-2.8 2.3-3 0.5-0.4 1.3-0.5 1.9-0.2 0.3 0.1 0.4 0.2 0.7 0.4 0.2 0.2 0.3 0.5 1.9 2.8 1 1.5 1.9 2.7 1.9 2.8 0.1 0.3 0.2 0.5 0.2 0.8 0 0.4-0.1 0.6-0.2 0.9q-0.4 0.8-1.4 1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                                <svg id="asc" class=" hidden w-3 h-3" aria-hidden="true" xmlns="http://www.w3.org/2000/svg"
                                    fill="currentColor" viewBox="0 0 24 24">
                                    <path
                                        d="m8.2 8c-0.8 0.2-1.4 0.7-1.6 1.5-0.1 0.1-0.1 0.3-0.1 0.5 0 0.3 0.1 0.5 0.2 0.8 0.1 0.1 0.9 1.3 1.9 2.8 1.9 2.8 1.9 2.8 2.3 3 0.5 0.4 1.3 0.5 1.9 0.2 0.3-0.1 0.4-0.2 0.7-0.4 0.2-0.2 0.3-0.5 1.9-2.8 1-1.5 1.9-2.7 1.9-2.8 0.1-0.3 0.2-0.5 0.2-0.8 0-0.4-0.1-0.6-0.2-0.9q-0.4-0.8-1.4-1.1c-0.1 0-0.4 0-3.8 0-3.1 0-3.8 0-3.9 0z" />
                                </svg>
                            </span>
                        </th>
                        <th class="border-b bg-rooted"></th>
                        <th class="border-b bg-rooted rounded-tr-md pr-4"></th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-gray-200">
                    <td colspan="9" class="text-black text-center h-[115px]" >
                        <div><span class="loader"></span></div>
                    </td>
                </tbody>
            </table>
        </div>
        {{> table-pagination }}
    </div>
</div>

<script>
    class Orders {
        constructor() {
            document.addEventListener('DOMContentLoaded', () => {
                this.table = document.querySelector('table').querySelector('tbody');
                this.renderOrders = this.renderOrders.bind(this);
            
                this.searchInp = document.getElementById('search-orders');
                this.query = null;

                this.orderCount = 0;
                this.paginationNext = document.getElementById('table-pagination-next');
                this.countPerPageEl = document.getElementById('pagination-per-page');
                this.countPerPage = () => document.getElementById('pagination-per-page').value;
                this.tablePaginationTotal = document.getElementById('table-pagination-total');

                this.page = 1;
                this.paginationShowing = document.getElementById('table-pagination-showing');
                this.paginationPrevious = document.getElementById('table-pagination-previous');
                this.paginationNext = document.getElementById('table-pagination-next');

                // Create the first page button dynamically
                this.paginationFirstPage = document.createElement('button');
                this.paginationFirstPage.id = 'table-pagination-page-first';
                this.paginationFirstPage.innerHTML = '1';
                this.paginationFirstPage.classList.add('flex', 'items-center', 'justify-center', 'px-3', 'h-8', 'text-rooted', 'border', 'border-gray-300', 'bg-blue-50', 'hover:bg-blue-100');
                this.paginationFirstPage.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (this.page === 1) {
                        return;
                    }
                    this.page = 1;
                    this.fetchOrders();
                    this.fetchOrderStats();
                    this.updatePaginationShowing();
                    this.updateActivePageButton();
                    const listItems = document.querySelectorAll('li');
                    // Iterate through each <li> element
                    listItems.forEach((li) => {
                        // Check if the <li> element is empty
                        if (li.innerHTML.trim() === '') {
                            // Remove the empty <li> element from the DOM
                            li.remove();
                        }
                    });
                });

                this.paginationPrevious.addEventListener('click', this.pagePrevious.bind(this));
                this.paginationNext.addEventListener('click', this.pageNext.bind(this));
                this.fetchOrders();
                this.fetchOrderStats();
                this.updatePaginationShowing();

                this.firstPage = document.getElementById('table-pagination-first')
                this.lastPage = document.getElementById('table-pagination-last')

                this.firstPage.addEventListener('click', (e) => {
                    e.preventDefault();
                    if (this.page === 1) {
                        return;
                    }
                    this.page = 1;
                    this.fetchOrders();
                    this.updatePaginationShowing();
                    this.updatePaginationPages();
                    this.updateActivePageButton();
                });

                this.lastPage.addEventListener('click', (e) => {
                    e.preventDefault();
                    const totalPages = Math.ceil(this.orderCount / this.countPerPage());
                    if (this.page === totalPages) {
                        return;
                    }
                    this.page = totalPages;
                    this.fetchOrders();
                    this.updatePaginationShowing();
                    this.updatePaginationPages();
                    this.updateActivePageButton();
                });

                // Go to first page
                this.paginationFirstPage.addEventListener('click', () => {
                    if (this.page === 1) {
                        return;
                    }
                    this.page = 1;
                    this.fetchOrders();
                    this.updatePaginationShowing();
                    this.updateActivePageButton();
                });

                this.searchInp.addEventListener('input', (event) => {
                    if (event.target.value.length >= 3) {
                        this.query = event.target.value;
                        this.fetchOrders();
                    } else {
                        if (this.query) {
                            this.query = null;
                            this.fetchOrders();
                        }
                    }
                });

                this.countPerPageEl.addEventListener('change', (event) => {
                    this.page = 1;
                    this.fetchInventory();
                    this.updatePaginationShowing();
                    this.updatePaginationPages();
                });
            })
        }
    
        pageNext() {
            if (this.orderCount <= this.page * this.countPerPage()) {
                return;
            }

            this.page++;
            this.fetchOrders();
            this.updatePaginationShowing();
            this.updatePaginationPages();
            this.updateActivePageButton();
        }

        pagePrevious() {
            if (this.page <= 1) {
                return;
            }

            this.page--;
            this.fetchOrders();
            this.updatePaginationShowing();
            this.updatePaginationPages();
            this.updateActivePageButton();
        }
    
        updatePaginationPages() {
            const totalPages = Math.ceil(this.orderCount / this.countPerPage());
            const currentPage = this.page;
            const maxVisiblePages = 5;
            let startPage = Math.max(1, currentPage - 2);
            let endPage = Math.min(totalPages, currentPage + 2);

            // Adjust start and end pages if they are out of bounds
            if (currentPage <= 3) {
                endPage = Math.min(totalPages, maxVisiblePages);
            } else if (currentPage >= totalPages - 2) {
                startPage = Math.max(1, totalPages - 4);
            }

            // Remove existing page buttons
            const pageButtons = document.querySelectorAll('[data-pagination-page]');
            pageButtons.forEach((button) => button.remove());

            // Create new page buttons
            for (let i = startPage; i <= endPage; i++) {
                const li = document.createElement('li');
                const pageButton = this.paginationFirstPage.cloneNode(true);
                pageButton.id = '';
                pageButton.dataset.paginationPage = i;
                pageButton.innerHTML = i;
                pageButton.classList.remove('text-rooted', 'bg-rooted-foreground', 'hover:bg-rooted-secondary');

                // Page button event listener
                pageButton.addEventListener('click', () => {
                    this.page = i;
                    this.fetchOrders();
                    this.updatePaginationShowing();
                    this.updatePaginationPages();
                    this.updateActivePageButton();
                });

                li.appendChild(pageButton);
                this.paginationNext.parentElement.insertAdjacentElement('beforebegin', li);
            }

            // Update the active page button
            this.updateActivePageButton();

            const listItems = document.querySelectorAll('li');
            listItems.forEach((li) => {
                if (li.innerHTML.trim() === '') {
                    li.remove();
                }
            });
        }

        updateActivePageButton() {
            const pageButtons = document.querySelectorAll('[data-pagination-page]');
            pageButtons.forEach((button) => {
                if (parseInt(button.dataset.paginationPage) === this.page) {
                    button.classList.add('flex', 'items-center', 'justify-center', 'px-3', 'h-8', 'text-rooted', 'border', 'border-gray-300', 'bg-rooted-foregound', 'hover:bg-rooted-secondary');
                } else {
                    button.classList.remove('text-rooted', 'bg-rooted-foreground', 'hover:bg-rooted-secondary');
                }
            });
        }

        updatePaginationShowing() {
            const showing = this.page * this.countPerPage();
            this.paginationShowing.innerHTML = `${showing - this.countPerPage() + 1}-${showing}`;
        }

        renderOrders(orders) {
            const priceFormatter = new Intl.NumberFormat('en-US', {
                currency: 'GBP',
            });

            for (let i = 0; i < orders.length; i++) {
                const order = orders[i];

                const tr = document.createElement('tr');
                tr.classList.add('odd:bg-gray-50', 'hover:bg-[#e0e6f1]');
                tr.innerHTML = `
                    <td class="whitespace-nowrap px-4 py-2 pl-4 font-medium text-gray-900">
                        <button id="${order.id}" class="pl-2">${order.id}</button>
                    </td>
                    <td class="whitespace-nowrap px-4 py-2 pl-0 text-gray-700">${order.customer.firstName} ${order.customer.surname}</td>
                    <td class="whitespace-nowrap px-4 py-2 pl-0 text-gray-700">${order.customer.email}</td>
                    <td class="whitespace-nowrap px-4 py-2 pl-0 text-gray-700">${order.total}</td>
                    <td>
                        <div class="relative">
                            <div class="inline-flex items-center overflow-hidden rounded-md border bg-white">
                                <button id="view"
                                    class="border-e px-4 py-2 text-sm/none text-gray-600 hover:bg-gray-50 hover:text-gray-700">
                                    View
                                </button>
                                <button id="edit"
                                    class="h-full p-2 text-gray-600 hover:bg-gray-50 hover:text-gray-700 border-r">
                                    <span class="sr-only">Edit</span>
                                    <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path><path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path></svg>
                                </button>
                                {{#if (isUserAdmin)}}
                                    <button id="delete-order"
                                        class="h-full p-2 text-gray-600 hover:bg-red-50 hover:text-red-700"> 
                                        <span class="sr-only">Delete</span>
                                        <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><polyline points="3 6 5 6 21 6"></polyline><path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path><line x1="10" y1="11" x2="10" y2="17"></line><line x1="14" y1="11" x2="14" y2="17"></line></svg>
                                    </button>
                                {{/if}}
                            </div>
                        </div>
                    </td>
                `
            
                tr.querySelector('#delete-order').addEventListener('click', () => {
                    swal({
                        title: "Are you sure?",
                        text: "You are about to delete this order. This action cannot be undone!",
                        icon: "warning",
                        buttons: true,
                        dangerMode: true
                    }).then((willDelete) => {
                        if (willDelete) {
                            fetch(`/orders/api/delete/${order.id}`, {
                                method: 'DELETE',
                                headers: {
                                    'Content-Type': 'application/json'
                                }
                            }).then(res => res.json()).then((data) => {
                                if (data.code === 200) {
                                    this.fetchOrders();
                                    this.fetchOrderStats();

                                    notify.success('Order successfully deleted', 'Success')
                                }
                            }).catch((err) => {
                                console.log(err)
                                notify.error('Error deleting order', 'Error')
                            })
                        }
                    })
                })

                this.table.append(tr)
            }
        }

        renderEmpty() {
            this.table.innerHTML = `
                <tr class="bg-gray-50">
                    <td colspan="10" class="py-2 text-center text-gray-700">No orders found, create a new order <span id="not-found-create" class="text-rooted cursor-pointer">now</span>.</td>
                </tr>
            `;

            {{!-- document.getElementById('not-found-create').addEventListener('click', ); --}}
        }

        renderError() {
            this.table.innerHTML = `
                <tr class="bg-gray-50">
                    <td colspan="8" class="py-2 text-center text-red-400">Error fetching orders</td>
                </tr>
            `;
        }

        emptyTable() {
            this.table.innerHTML = '';
        }

        fetchOrders() {
            const url = new URL('/orders/api', window.location.origin);

            if (this.query) {
                url.searchParams.append('q', this.query);
            }

            if (this.countPerPage()) {
                url.searchParams.append('count', this.countPerPage());
            }

            if (this.page > 1) {
                url.searchParams.append('page', this.page);
            }

            fetch(url.href)
                .then((response) => response.json())
                .then((data) => {
                    if (data.code === 200) {
                        this.emptyTable();

                        if (data.data.orders.length === 0) {
                            this.renderEmpty();
                            return;
                        }

                        this.renderOrders(data.data.orders);
                    } else {
                        this.renderError();
                    }
                })
                .catch((error) => {
                    console.log(error);
                });
        }

        fetchOrderStats() {
            fetch('/inventory/api/stats')
                .then((response) => response.json())
                .then((data) => {
                    if (data.code === 200) {
                        const stats = data.data;
                        this.tablePaginationTotal.innerHTML = stats.total + ' orders';

                        this.orderCount = stats.total;
                        this.updatePaginationPages();
                    }
                })
                .catch((error) => {
                    console.log(error);
                });
        }
    }

    const orders = new Orders();
</script>
